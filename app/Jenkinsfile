pipeline {
    agent any
    
    environment {
        AWS_REGION = 'eu-west-2'
        ECR_REGISTRY = '475641479654.dkr.ecr.eu-west-2.amazonaws.com'
        IMAGE_NAME = 'realworld-api'
        ASG_NAME = 'realworld-dev-app-asg'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Application') {
            steps {
                dir('app') {
                    script {
                        sh 'npm install'
                        sh 'npx nx build --prod'
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('app') {
                    script {
                        sh 'npm test -- --watch=false --browsers=ChromeHeadless'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        def imageTag = "${BUILD_NUMBER}"
                        sh """
                            docker build --platform linux/amd64 -t ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} .
                            docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                        env.IMAGE_TAG = imageTag
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${env.IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                    """
                }
            }
        }
        
        stage('Deploy to AWS') {
            steps {
                script {
                    sh """
                        # Start instance refresh to deploy new image
                        aws autoscaling start-instance-refresh \\
                            --auto-scaling-group-name ${ASG_NAME} \\
                            --preferences MinHealthyPercentage=50 \\
                            --region ${AWS_REGION}
                    """
                }
            }
        }
        
        stage('Wait for Deployment') {
            steps {
                script {
                    sh """
                        # Wait for deployment to complete
                        echo "Waiting for deployment to complete..."
                        sleep 300
                        
                        # Check if targets are healthy
                        aws elbv2 describe-target-health \\
                            --target-group-arn \$(aws elbv2 describe-target-groups \\
                                --names "realworld-dev-tg" \\
                                --query 'TargetGroups[0].TargetGroupArn' \\
                                --output text \\
                                --region ${AWS_REGION}) \\
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
