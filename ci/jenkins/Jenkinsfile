pipeline {
    agent any
    
    environment {
        AWS_REGION = 'eu-west-2'
        ECR_REGISTRY = '475641479654.dkr.ecr.eu-west-2.amazonaws.com'
        IMAGE_NAME = 'realworld-api'
        ASG_NAME = 'realworld-dev-app-asg'
        NODE_ENV = 'test'
    }
    
    stages {
        stage('Code Checkout') {
            steps {
                checkout scm
                sh 'ls -la'
                sh 'find . -name "package.json" -type f'
            }
        }
        
        stage('Build & Install Dependencies') {
            steps {
                script {
                    if (fileExists('app/package.json')) {
                        dir('app') {
                            sh 'npm install'
                            sh 'npx nx build --prod'
                        }
                    } else if (fileExists('package.json')) {
                        sh 'npm install'
                        sh 'npm run build'
                    } else {
                        error 'No package.json found in expected locations'
                    }
                }
            }
        }
        
        stage('Security Scanning - Dependencies') {
            steps {
                script {
                    if (fileExists('app/package.json')) {
                        dir('app') {
                            sh '''
                                npm audit --audit-level high --json > npm-audit.json || true
                                npm audit --audit-level high || true
                                echo "Security scan completed - review results above"
                            '''
                        }
                    } else {
                        sh '''
                            npm audit --audit-level high --json > npm-audit.json || true
                            npm audit --audit-level high || true
                            echo "Security scan completed - review results above"
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/npm-audit.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Security Scanning - Infrastructure') {
            parallel {
                stage('Terraform Security - tfsec') {
                    steps {
                        script {
                            if (fileExists('terraform') || fileExists('infrastructure')) {
                                sh '''
                                    curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
                                    if [ -d "terraform" ]; then
                                        ./tfsec terraform/ --format json --out tfsec-results.json || true
                                        ./tfsec terraform/ || true
                                    elif [ -d "infrastructure" ]; then
                                        ./tfsec infrastructure/ --format json --out tfsec-results.json || true
                                        ./tfsec infrastructure/ || true
                                    fi
                                    echo "Terraform security scan completed"
                                '''
                            } else {
                                echo 'No Terraform files found, skipping tfsec scan'
                            }
                        }
                    }
                }
                stage('Infrastructure Security - Checkov') {
                    steps {
                        script {
                            if (fileExists('terraform') || fileExists('infrastructure')) {
                                sh '''
                                    pip3 install checkov
                                    if [ -d "terraform" ]; then
                                        checkov -d terraform/ --framework terraform --output json --output-file checkov-results.json || true
                                        checkov -d terraform/ --framework terraform || true
                                    elif [ -d "infrastructure" ]; then
                                        checkov -d infrastructure/ --framework terraform --output json --output-file checkov-results.json || true
                                        checkov -d infrastructure/ --framework terraform || true
                                    fi
                                    echo "Infrastructure security scan completed"
                                '''
                            } else {
                                echo 'No Terraform files found, skipping Checkov scan'
                            }
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '*-results.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Test Suite') {
            steps {
                script {
                    if (fileExists('app/package.json')) {
                        dir('app') {
                            sh '''
                                npx prisma generate
                                export DATABASE_URL="file:./test.db"
                                npx prisma db push --force-reset
                                npm test -- --watch=false --runInBand --forceExit
                            '''
                        }
                    } else {
                        sh '''
                            export DATABASE_URL="file:./test.db"
                            npm test
                        '''
                    }
                }
            }
        }
        
        stage('Docker Image Build') {
            steps {
                script {
                    def imageTag = "${BUILD_NUMBER}"
                    if (fileExists('app/Dockerfile')) {
                        dir('app') {
                            sh """
                                docker build --platform linux/amd64 -t ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} .
                                docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                            """
                        }
                    } else if (fileExists('Dockerfile')) {
                        sh """
                            docker build --platform linux/amd64 -t ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} .
                            docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    } else {
                        error 'No Dockerfile found'
                    }
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Container Security Scanning') {
            steps {
                sh '''
                    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                    trivy image --format json --output trivy-results.json ${ECR_REGISTRY}/${IMAGE_NAME}:${env.IMAGE_TAG} || true
                    trivy image --severity HIGH,CRITICAL ${ECR_REGISTRY}/${IMAGE_NAME}:${env.IMAGE_TAG} || true
                    echo "Container security scan completed"
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-results.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Container Registry Push') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${env.IMAGE_TAG}
                            docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Production Deployment') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh """
                            aws autoscaling start-instance-refresh \\
                                --auto-scaling-group-name ${ASG_NAME} \\
                                --preferences MinHealthyPercentage=50 \\
                                --region ${AWS_REGION}
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                sh """
                    echo "Waiting for new instances to come online..."
                    sleep 180
                    curl -f https://dev-api.iasolutions.co.uk/health || exit 1
                    echo "Health check passed"
                """
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f || true'
        }
        success {
            echo "Build #${BUILD_NUMBER} with security scanning completed successfully"
            echo "Review security scan results in archived artifacts"
        }
        failure {
            echo "Build failed - Check security scan results and logs"
        }
    }
}
