pipeline {
    agent any
    
    environment {
        AWS_REGION = 'eu-west-2'
        ECR_REGISTRY = '475641479654.dkr.ecr.eu-west-2.amazonaws.com'
        IMAGE_NAME = 'realworld-api'
        ASG_NAME = 'realworld-dev-asg'
        NODE_ENV = 'production'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'ls -la'
                sh 'ls -la app/'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('app') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('app') {
                    sh 'npm test'
                }
            }
        }
        
        stage('Security Audit') {
            steps {
                dir('app') {
                    sh 'npm audit || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = env.BUILD_NUMBER
                    dir('app') {
                        sh """
                            docker build --platform linux/amd64 -t ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} .
                            docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                    """
                }
            }
        }
        
        stage('Deploy to AWS') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        aws autoscaling start-instance-refresh \\
                            --auto-scaling-group-name ${ASG_NAME} \\
                            --preferences MinHealthyPercentage=50,InstanceWarmup=300 \\
                            --region ${AWS_REGION}
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                sh """
                    echo "Waiting for deployment to complete..."
                    sleep 180
                    
                    echo "Testing health endpoint..."
                    curl -f https://dev-api.iasolutions.co.uk/health || exit 1
                    echo "Health check passed!"
                """
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f || true'
        }
        success {
            echo "Pipeline completed successfully! Application deployed and healthy."
        }
        failure {
            echo "Pipeline failed. Check the logs above."
        }
    }
}
