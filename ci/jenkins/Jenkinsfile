pipeline {
    agent any
    
    environment {
        AWS_REGION = 'eu-west-2'
        ECR_REGISTRY = '475641479654.dkr.ecr.eu-west-2.amazonaws.com'
        IMAGE_NAME = 'realworld-api'
        ASG_NAME = 'realworld-dev-asg'
        PATH = "/usr/local/bin:/var/lib/jenkins/.local/bin:$PATH"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'ls -la app/'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('app') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('app') {
                    sh 'npm test'
                }
            }
        }
        
        stage('Security Scanning') {
            parallel {
                stage('Dependency Audit') {
                    steps {
                        dir('app') {
                            sh 'npm audit --json > npm-audit.json || true'
                            sh 'npm audit || true'
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: '**/npm-audit.json', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Infrastructure Security - tfsec') {
                    steps {
                        sh '''
                            tfsec terraform/ --format json --out tfsec-results.json || true
                            tfsec terraform/ || true
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'tfsec-results.json', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Infrastructure Security - Checkov') {
                    steps {
                        sh '''
                            checkov -d terraform/ --framework terraform --output json --output-file checkov-results.json || true
                            checkov -d terraform/ --framework terraform --compact || true
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'checkov-results.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = env.BUILD_NUMBER
                    dir('app') {
                        sh """
                            docker build --platform linux/amd64 -t ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} .
                            docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${imageTag} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Container Security Scan') {
            steps {
                sh '''
                    trivy image --format json --output trivy-results.json ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || true
                    trivy image --severity HIGH,CRITICAL ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-results.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withCredentials([aws(credentialsId: '475641479654')]) {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                    """
                }
            }
        }
        
        stage('Deploy to AWS') {
            steps {
                withCredentials([aws(credentialsId: '475641479654')]) {
                    sh """
                        aws autoscaling start-instance-refresh \\
                            --auto-scaling-group-name ${ASG_NAME} \\
                            --preferences MinHealthyPercentage=50,InstanceWarmup=300 \\
                            --region ${AWS_REGION}
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                sh """
                    echo "Waiting for deployment to complete..."
                    sleep 180
                    echo "Testing health endpoint..."
                    curl -f https://dev-api.iasolutions.co.uk/health
                    echo "Health check passed!"
                """
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f || true'
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
